# BunPress Project Rules

## Path Resolution

- When comparing paths in Bun, be aware of format differences between `import.meta.url` (URL format with `file://` protocol) and `Bun.main` (regular path string).
- For entry point detection, use path-based comparison with `endsWith()` rather than direct equality checks.

## CLI Implementation

- Use `process.argv.slice(2)` to get command-line arguments, not `process.argv.includes()` which checks the entire array including the runtime path.
- Add output to both console.log and file-based logging during development for better debugging.
- Always use `process.exit(0)` after displaying help or version information to prevent continuing execution.

## Testing Strategy

- For testing CLI functionality, create isolated scripts that directly invoke the functions.
- Use file-based logging in addition to console output to capture results reliably.
- Test with both direct file execution and module imports to verify behavior in both contexts.

## Theme Management and Testing

- The theme manager is implemented as a singleton using a global variable `global.defaultThemeManager` to ensure proper test isolation.
- When testing theme-related functionality, always reset the theme manager between tests using `global.defaultThemeManager = undefined` in afterEach blocks.
- The theme registry plugin logs messages with expected theme counts - tests should verify these exact counts.
- CLI tests for themes should create minimal theme structures with required files (index.tsx/Layout.tsx, styles.css, layouts directory).
- Theme integration tests should verify theme discovery, loading, layout switching, and TOC rendering from an end-user perspective.
- For theme tests, create temporary theme directories with the necessary structure to avoid relying on existing themes.

## Debugging Techniques

- When debugging Bun-specific behavior, create minimal test cases outside the main application.
- Log environment details such as `process.env`, `process.argv`, and module paths.
- Use `BUN_DEBUG=1` environment variable for additional Bun-specific debugging information.

## Error Handling

- Handle path format differences explicitly when working with file paths from different sources.
- Add dedicated error handlers for CLI operations with user-friendly error messages.
- Use try/catch blocks around file operations with specific error messaging for common failures.

## Project Structure
- Follow the structure defined in memory-bank/systemPatterns.md
- Keep all React components in the themes directory
- Keep all core functionality in src/core
- Keep all plugins in src/plugins
- Keep all utilities in src/lib
- Keep all CLI functionality in src/cli

## Code Organization
- Use TypeScript for all code
- Use ESM modules only (no CommonJS)
- Follow a consistent pattern for exports
- Keep tests alongside code in __tests__ directories
- Use the .tsx extension only for React components

## Folder Structure Cleanup
1. Consolidate test directories:
   - Keep tests alongside the code they test
   - Use __tests__ naming convention consistently

2. Remove redundant folders:
   - Merge overlapping test directories
   - Remove empty directories

3. Reorganize example content:
   - Move all examples to examples directory
   - Structure examples by feature (basic, fullstack, etc.)

4. Clean up development artifacts:
   - Move test content to test-content directory
   - Keep temporary build outputs separate from source

## Naming Conventions
- Use kebab-case for file names
- Use PascalCase for React components
- Use camelCase for functions and variables
- Use UPPER_SNAKE_CASE for constants

## Documentation
- Keep memory-bank files focused and non-redundant
- Update documentation when making significant changes
- Document APIs with JSDoc comments
- Include examples in documentation

## Plugin Development
- Follow the plugin interface in src/core/plugin.ts
- Implement plugin tests in __tests__ directories
- Export plugins through src/plugins/index.ts
- Use consistent naming for plugin options

## Build Process
- Use Bun for all build operations
- Leverage Bun's native features where possible
- Keep the build process clean and reproducible
- Document build configuration options 